{"version":3,"sources":["webpack:///./src/views/company/CompanyInfo.vue","webpack:///src/views/company/CompanyInfo.vue","webpack:///./src/views/company/CompanyInfo.vue?9f94","webpack:///./src/views/company/CompanyInfo.vue?8b1a","webpack:///./src/api/dict.js","webpack:///./src/api/company.js"],"names":["render","_vm","this","_c","_self","ref","attrs","rules","form","items","save","staticRenderFns","name","components","RForm","data","id","contact","telephone","email","addr","url","size","type","logo","description","required","message","label","prop","placeholder","options","mounted","getInfo","getDictList1","getDictList2","methods","typeId","dict_query","then","res","arr","forEach","item","p","value","dictKey","dictVal","push","companyInfo","console","log","flag","$refs","validateForm","param","single","update","$message","success","msg","close","callback","component","type_query","request","method","create","del","ids","params","query"],"mappings":"yHAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACA,EAAG,SAAS,CAACE,IAAI,SAASC,MAAM,CAAC,MAAQL,EAAIM,MAAM,KAAON,EAAIO,KAAK,MAAQP,EAAIQ,MAAM,KAAOR,EAAIS,SAAS,IAElLC,EAAkB,G,gDCUtB,GACAC,KAAA,cACAC,WAAA,CAAAC,cACAC,OACA,OACAP,KAAA,CACAQ,GAAA,GACAJ,KAAA,GACAK,QAAA,GACAC,UAAA,GACAC,MAAA,GACAC,KAAA,GACAC,IAAA,GACAC,KAAA,GACAC,KAAA,GACAC,KAAA,GACAC,YAAA,IAEAlB,MAAA,CACAK,KAAA,EAAAc,UAAA,EAAAC,QAAA,aAEAlB,MAAA,CACA,CAAAc,KAAA,OAAAK,MAAA,KAAAC,KAAA,OAAAjB,KAAA,OAAAkB,YAAA,SACA,CAAAP,KAAA,OAAAK,MAAA,MAAAC,KAAA,UAAAjB,KAAA,UAAAkB,YAAA,SAAAC,QAAA,IACA,CAAAR,KAAA,OAAAK,MAAA,OAAAC,KAAA,YAAAjB,KAAA,YAAAkB,YAAA,WACA,CAAAP,KAAA,OAAAK,MAAA,KAAAC,KAAA,QAAAjB,KAAA,QAAAkB,YAAA,SACA,CAAAP,KAAA,OAAAK,MAAA,KAAAC,KAAA,OAAAjB,KAAA,OAAAkB,YAAA,SACA,CAAAP,KAAA,OAAAK,MAAA,KAAAC,KAAA,MAAAjB,KAAA,MAAAkB,YAAA,SACA,CAAAP,KAAA,OAAAK,MAAA,KAAAC,KAAA,MAAAjB,KAAA,MAAAkB,YAAA,SACA,CAAAP,KAAA,SAAAK,MAAA,KAAAC,KAAA,OAAAjB,KAAA,OAAAkB,YAAA,QAAAC,QAAA,IACA,CAAAR,KAAA,SAAAK,MAAA,OAAAC,KAAA,OAAAjB,KAAA,OAAAkB,YAAA,UAAAC,QAAA,IACA,CAAAR,KAAA,OAAAK,MAAA,OAAAC,KAAA,OAAAjB,KAAA,OAAAkB,YAAA,QACA,CAAAP,KAAA,OAAAK,MAAA,OAAAC,KAAA,cAAAjB,KAAA,cAAAkB,YAAA,YAIAE,UACA,KAAAC,UACA,KAAAC,aAAA,GACA,KAAAC,aAAA,IAEAC,QAAA,CACAF,aAAAG,GACAC,eAAA,CAAAD,WAAAE,KAAAC,IACA,IAAAC,EAAA,GACAD,EAAAzB,KAAA2B,QAAAC,IACA,IAAAC,EAAA,CAAAC,MAAAF,EAAAG,QAAAlB,MAAAe,EAAAI,SACAN,EAAAO,KAAAJ,KAEA,KAAAnC,MAAAiC,QAAAC,IACA,UAAAA,EAAApB,MAAA,QAAAoB,EAAA/B,OACA+B,EAAAZ,QAAAU,QAKAN,aAAAE,GACAC,eAAA,CAAAD,WAAAE,KAAAC,IACA,IAAAC,EAAA,GACAD,EAAAzB,KAAA2B,QAAAC,IACA,IAAAC,EAAA,CAAAC,MAAAF,EAAAG,QAAAlB,MAAAe,EAAAI,SACAN,EAAAO,KAAAJ,KAEA,KAAAnC,MAAAiC,QAAAC,IACA,UAAAA,EAAApB,MAAA,QAAAoB,EAAA/B,OACA+B,EAAAZ,QAAAU,QAKAR,UACAgB,iBAAAV,KAAAC,IACA,KAAAhC,KAAAgC,EAAAzB,KACAmC,QAAAC,IAAA,KAAA3C,SAGAE,OACA,IAAA0C,EAAA,KAAAC,MAAA,UAAAC,eACA,GAAAF,EAAA,CACA,IAAAG,EAAA,KAAA/C,KACA,KAAAA,KAAAgD,OACAD,EAAAC,OAAA,IAEAD,EAAAC,OAAA,IAEAC,eAAAF,GAAAhB,KAAAC,IACA,KAAAkB,SAAAC,QAAAnB,EAAAoB,KACA,KAAAL,MAAAM,QACA,KAAAN,MAAAO,iBCpGoW,I,YCOhWC,EAAY,eACd,EACA/D,EACAW,GACA,EACA,KACA,WACA,MAIa,aAAAoD,E,2CClBf,0LAEO,SAASC,EAAWjD,GACvB,OAAOkD,eAAQ,CACX5C,IAAK,aACL6C,OAAQ,OACRnD,KAAMA,IAIP,SAASoD,EAAOpD,GACnB,OAAOkD,eAAQ,CACX5C,IAAK,cACL6C,OAAQ,OACRnD,KAAMA,IAIP,SAAS0C,EAAO1C,GACnB,OAAOkD,eAAQ,CACX5C,IAAK,cACL6C,OAAQ,OACRnD,KAAMA,IAIP,SAASqD,EAAIC,GAChB,OAAOJ,eAAQ,CACX5C,IAAK,cACL6C,OAAQ,OACRI,OAAQ,CAAC,IAAOD,KAYjB,SAAS/B,EAAWvB,GACvB,OAAOkD,eAAQ,CACX5C,IAAK,aACL6C,OAAQ,OACRnD,KAAMA,M,kCC9Cd,wJAUO,SAAS0C,EAAO1C,GACnB,OAAOkD,eAAQ,CACX5C,IAAK,iBACL6C,OAAQ,OACRnD,KAAMA,IAIP,SAASqD,EAAIC,GAChB,OAAOJ,eAAQ,CACX5C,IAAK,iBACL6C,OAAQ,OACRI,OAAQ,CAAC,IAAOD,KAYjB,SAASE,EAAMxD,GAClB,OAAOkD,eAAQ,CACX5C,IAAK,gBACL6C,OAAQ,OACRnD,KAAMA,IAIP,SAASkC,IACZ,OAAOgB,eAAQ,CACX5C,IAAK,eACL6C,OAAQ","file":"js/chunk-fa2bfa1e.cf4f13d9.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('r-form',{ref:\"myForm\",attrs:{\"rules\":_vm.rules,\"form\":_vm.form,\"items\":_vm.items,\"save\":_vm.save}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <r-form ref=\"myForm\" :rules=\"rules\" :form=\"form\" :items=\"items\" :save=\"save\"></r-form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {update} from \"@/api/company\";\r\n    import RForm from \"@/components/RForm\";\r\n    import {companyInfo} from \"@/api/company\";\r\n    import {dict_query} from \"@/api/dict\";\r\n\r\n    export default {\r\n        name: \"CompanyInfo\",\r\n        components: {RForm},\r\n        data() {\r\n            return {\r\n                form: {\r\n                    id: '',\r\n                    name: '',\r\n                    contact: '',\r\n                    telephone: '',\r\n                    email: '',\r\n                    addr: '',\r\n                    url: '',\r\n                    size: '',\r\n                    type: '',\r\n                    logo: '',\r\n                    description: '',\r\n                },\r\n                rules: {\r\n                    name: [{required: true, message: '必填项不能为空'}]\r\n                },\r\n                items: [\r\n                    {type: 'text', label: '名称', prop: 'name', name: 'name', placeholder: '请输入名称'},\r\n                    {type: 'text', label: '联系人', prop: 'contact', name: 'contact', placeholder: '请选择联系人', options: []},\r\n                    {type: 'text', label: '联系电话', prop: 'telephone', name: 'telephone', placeholder: '请输入联系电话'},\r\n                    {type: 'text', label: '邮箱', prop: 'email', name: 'email', placeholder: '请输入邮箱'},\r\n                    {type: 'text', label: '地址', prop: 'addr', name: 'addr', placeholder: '请输入地址'},\r\n                    {type: 'text', label: '外链', prop: 'url', name: 'url', placeholder: '请输入外链'},\r\n                    {type: 'text', label: '网址', prop: 'url', name: 'url', placeholder: '请输入网址'},\r\n                    {type: 'select', label: '规模', prop: 'size', name: 'size', placeholder: '请输入规模', options: []},\r\n                    {type: 'select', label: '公司类型', prop: 'type', name: 'type', placeholder: '请选择公司类型', options: []},\r\n                    {type: 'file', label: 'Logo', prop: 'logo', name: 'logo', placeholder: 'Logo'},\r\n                    {type: 'area', label: '公司描述', prop: 'description', name: 'description', placeholder: '请录入内容'},\r\n                ]\r\n            }\r\n        },\r\n        mounted() {\r\n            this.getInfo();\r\n            this.getDictList1(4);\r\n            this.getDictList2(5);\r\n        },\r\n        methods: {\r\n            getDictList1(typeId) {\r\n                dict_query({typeId: typeId}).then(res => {\r\n                    let arr = [];\r\n                    res.data.forEach(item => {\r\n                        let p = {value: item.dictKey, label: item.dictVal};\r\n                        arr.push(p);\r\n                    });\r\n                    this.items.forEach(item => {\r\n                        if (item.type == 'select' && item.name == 'type') {\r\n                            item.options = arr;\r\n                        }\r\n                    })\r\n                })\r\n            },\r\n            getDictList2(typeId) {\r\n                dict_query({typeId: typeId}).then(res => {\r\n                    let arr = [];\r\n                    res.data.forEach(item => {\r\n                        let p = {value: item.dictKey, label: item.dictVal};\r\n                        arr.push(p);\r\n                    });\r\n                    this.items.forEach(item => {\r\n                        if (item.type == 'select' && item.name == 'size') {\r\n                            item.options = arr;\r\n                        }\r\n                    })\r\n                })\r\n            },\r\n            getInfo() {\r\n                companyInfo().then(res => {\r\n                    this.form = res.data;\r\n                    console.log(this.form)\r\n                })\r\n            },\r\n            save() {\r\n                let flag = this.$refs['myForm'].validateForm();\r\n                if (flag) {\r\n                    let param = this.form;\r\n                    if (this.form.single) {\r\n                        param.single = 'Y';\r\n                    } else {\r\n                        param.single = 'N';\r\n                    }\r\n                    update(param).then(res => {\r\n                        this.$message.success(res.msg);\r\n                        this.param.close();\r\n                        this.param.callback();\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CompanyInfo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./CompanyInfo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./CompanyInfo.vue?vue&type=template&id=0f4d31d1&scoped=true&\"\nimport script from \"./CompanyInfo.vue?vue&type=script&lang=js&\"\nexport * from \"./CompanyInfo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"0f4d31d1\",\n  null\n  \n)\n\nexport default component.exports","import request from '@/utils/request';\r\n\r\nexport function type_query(data) {\r\n    return request({\r\n        url: 'type/query',\r\n        method: 'post',\r\n        data: data\r\n    })\r\n}\r\n\r\nexport function create(data) {\r\n    return request({\r\n        url: 'dict/create',\r\n        method: 'post',\r\n        data: data\r\n    })\r\n}\r\n\r\nexport function update(data) {\r\n    return request({\r\n        url: 'dict/update',\r\n        method: 'post',\r\n        data: data\r\n    })\r\n}\r\n\r\nexport function del(ids) {\r\n    return request({\r\n        url: 'dict/delete',\r\n        method: 'post',\r\n        params: {\"ids\": ids}\r\n    })\r\n}\r\n\r\nexport function detail(id) {\r\n    return request({\r\n        url: 'dict/detail',\r\n        method: 'post',\r\n        params: {\"id\": id}\r\n    })\r\n}\r\n\r\nexport function dict_query(data) {\r\n    return request({\r\n        url: 'dict/query',\r\n        method: 'post',\r\n        data: data\r\n    })\r\n}","import request from '@/utils/request';\r\n\r\nexport function create(data) {\r\n    return request({\r\n        url: 'company/create',\r\n        method: 'post',\r\n        data: data\r\n    })\r\n}\r\n\r\nexport function update(data) {\r\n    return request({\r\n        url: 'company/update',\r\n        method: 'post',\r\n        data: data\r\n    })\r\n}\r\n\r\nexport function del(ids) {\r\n    return request({\r\n        url: 'company/delete',\r\n        method: 'post',\r\n        params: {\"ids\": ids}\r\n    })\r\n}\r\n\r\nexport function detail(id) {\r\n    return request({\r\n        url: 'company/detail',\r\n        method: 'post',\r\n        params: {\"id\": id}\r\n    })\r\n}\r\n\r\nexport function query(data) {\r\n    return request({\r\n        url: 'company/query',\r\n        method: 'post',\r\n        data: data\r\n    })\r\n}\r\n\r\nexport function companyInfo() {\r\n    return request({\r\n        url: 'company/info',\r\n        method: 'post'\r\n    })\r\n}"],"sourceRoot":""}