{"remainingRequest":"C:\\Users\\yol\\Documents\\GitHub\\job\\job-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\yol\\Documents\\GitHub\\job\\job-web\\src\\views\\dict\\Dict.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\yol\\Documents\\GitHub\\job\\job-web\\src\\views\\dict\\Dict.vue","mtime":1645335817412},{"path":"C:\\Users\\yol\\Documents\\GitHub\\job\\job-web\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\Users\\yol\\Documents\\GitHub\\job\\job-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\yol\\Documents\\GitHub\\job\\job-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogICAgaW1wb3J0IHt0eXBlX3F1ZXJ5LCBkaWN0X3F1ZXJ5LCBkZWx9IGZyb20gJy4uLy4uL2FwaS9kaWN0JzsNCiAgICBpbXBvcnQgUlRhYmxlIGZyb20gIi4uLy4uL2NvbXBvbmVudHMvUlRhYmxlIjsNCiAgICBpbXBvcnQgQWRkIGZyb20gIi4vQWRkIjsNCiAgICBpbXBvcnQgRWRpdCBmcm9tICIuL0VkaXQiOw0KDQogICAgZXhwb3J0IGRlZmF1bHQgew0KICAgICAgICBuYW1lOiAiRGljdCIsDQogICAgICAgIGNvbXBvbmVudHM6IHtFZGl0LCBBZGQsIFJUYWJsZX0sDQogICAgICAgIGRhdGEoKSB7DQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgIHR5cGVUYWJsZURhdGE6IFtdLA0KICAgICAgICAgICAgICAgIGFjdGl2ZTogMCwNCiAgICAgICAgICAgICAgICBzZWxlY3RUeXBlSWQ6IDAsDQogICAgICAgICAgICAgICAgdHlwZVRhYmxlQ29sczogWw0KICAgICAgICAgICAgICAgICAgICB7cHJvcDogJ25hbWUnLCBsYWJlbDogJ+exu+Wei+WQjeensCd9DQogICAgICAgICAgICAgICAgXSwNCiAgICAgICAgICAgICAgICBkaWN0VGFibGVEYXRhOiBbXSwNCiAgICAgICAgICAgICAgICBkaWN0VGFibGVDb2xzOiBbDQogICAgICAgICAgICAgICAgICAgIHtwcm9wOiAnZGljdEtleScsIGxhYmVsOiAn5a2X5YW45ZCN56ewJ30sDQogICAgICAgICAgICAgICAgICAgIHtwcm9wOiAnZGljdFZhbCcsIGxhYmVsOiAn5a2X5YW45YC8J30sDQogICAgICAgICAgICAgICAgICAgIHtwcm9wOiAnc3RhdHVzJywgbGFiZWw6ICfnirbmgIEnLCBzbG90OiAnc2xvdF9zdGF0dXMnfSwNCiAgICAgICAgICAgICAgICAgICAge3Byb3A6ICdzb3J0JywgbGFiZWw6ICfluo/lj7cnLCB3aWR0aDogMTAwfSwNCiAgICAgICAgICAgICAgICBdLA0KICAgICAgICAgICAgICAgIGFkZDogew0KICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgY2xvc2U6IHRoaXMuY2xvc2UsDQogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB0aGlzLnJlbG9hZA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZWRpdDogew0KICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgY2xvc2U6IHRoaXMuY2xvc2UsDQogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB0aGlzLnJlbG9hZCwNCiAgICAgICAgICAgICAgICAgICAgZm9ybTogbnVsbA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgbW91bnRlZCgpIHsNCiAgICAgICAgICAgIHR5cGVfcXVlcnkoe30pLnRoZW4ocmVzID0+IHsNCiAgICAgICAgICAgICAgICB0aGlzLnR5cGVUYWJsZURhdGEgPSByZXMuZGF0YTsNCiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFR5cGVJZCA9IHRoaXMudHlwZVRhYmxlRGF0YVswXS5pZDsNCiAgICAgICAgICAgIH0pDQogICAgICAgICAgICB0aGlzLmxpc3Qoe3R5cGVJZDogdGhpcy5zZWxlY3RUeXBlSWR9KQ0KICAgICAgICB9LA0KICAgICAgICBtZXRob2RzOiB7DQogICAgICAgICAgICBjcmVhdGUoKSB7DQogICAgICAgICAgICAgICAgdGhpcy5hZGQudmlzaWJsZSA9IHRydWU7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgdXBkYXRlKCkgew0KICAgICAgICAgICAgICAgIGxldCBzZWxlY3Rpb25zID0gdGhpcy4kcmVmc1snbXV0aXBsZVRhYmxlJ10uc2VsZWN0aW9uOw0KICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25zLmxlbmd0aCA9PSAxKSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdC52aXNpYmxlID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0LmZvcm0gPSBzZWxlY3Rpb25zWzBdOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZygi6K+36YCJ5oup5LiA5p2h5pWw5o2u6L+b6KGM5L+u5pS5Iik7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIHJlbG9hZCgpIHsNCiAgICAgICAgICAgICAgICB0aGlzLmxpc3Qoe3R5cGVJZDogdGhpcy5zZWxlY3RUeXBlSWR9KQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIGxpc3QocGFyYW0pIHsNCiAgICAgICAgICAgICAgICBkaWN0X3F1ZXJ5KHBhcmFtKS50aGVuKHJlcyA9PiB7DQogICAgICAgICAgICAgICAgICAgIHRoaXMuZGljdFRhYmxlRGF0YSA9IHJlcy5kYXRhOw0KICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgY2xvc2UoKSB7DQogICAgICAgICAgICAgICAgdGhpcy5hZGQudmlzaWJsZSA9IGZhbHNlOw0KICAgICAgICAgICAgICAgIHRoaXMuZWRpdC52aXNpYmxlID0gZmFsc2U7DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgZGVsKCkgew0KICAgICAgICAgICAgICAgIGxldCBzZWxlY3Rpb25zID0gdGhpcy4kcmVmc1snbXV0aXBsZVRhYmxlJ10uc2VsZWN0aW9uOw0KICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25zLmxlbmd0aCA+IDApIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kY29uZmlybSgi56Gu5a6a5pyJ5Yig6Zmk5ZCX77yfIiwgIuWIoOmZpOaPkOekuiIpLnRoZW4oKCkgPT4gew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyciA9IHNlbGVjdGlvbnMubWFwKGl0ZW0gPT4gaXRlbS5pZCk7DQogICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWRzID0gYXJyLmpvaW4oJywnKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbChpZHMpLnRoZW4ocmVzID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWxvYWQoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IHsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS53YXJuaW5nKCLor7fpgInmi6nopoHliKDpmaTnmoTmlbDmja4iKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgaGFuZGxlVHlwZShpbmRleCwgdHlwZUlkKSB7DQogICAgICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBpbmRleDsNCiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdFR5cGVJZCA9IHR5cGVJZDsNCiAgICAgICAgICAgICAgICB0aGlzLmxpc3Qoe3R5cGVJZDogdHlwZUlkfSkNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg=="},{"version":3,"sources":["Dict.vue"],"names":[],"mappings":";AAmCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dict.vue","sourceRoot":"src/views/dict","sourcesContent":["<template>\r\n    <div style=\"background: #f2f2f2\">\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"5\">\r\n                <el-card>\r\n                    <ul class=\"type\">\r\n                        <li @click=\"handleType(index,item.id)\" :class=\"active==index?'active':''\"\r\n                            v-for=\"(item,index) in typeTableData\" :key=\"index\">\r\n                            {{item.name}}\r\n                        </li>\r\n                    </ul>\r\n                </el-card>\r\n            </el-col>\r\n            <el-col :span=\"19\">\r\n                <el-card>\r\n                    <div class=\"btn-panel\">\r\n                        <el-button size=\"small\" type=\"primary\" icon=\"el-icon-plus\" @click=\"create\">新增</el-button>\r\n                        <el-button size=\"small\" type=\"primary\" icon=\"el-icon-edit\" @click=\"update\">修改</el-button>\r\n                        <el-button size=\"small\" type=\"danger\" icon=\"el-icon-delete\" @click=\"del\">删除</el-button>\r\n                    </div>\r\n                    <r-table ref=\"mutipleTable\" :table-data=\"dictTableData\" :table-cols=\"dictTableCols\">\r\n                        <template slot=\"slot_status\" slot-scope=\"scope\">\r\n                            <el-tag v-if=\"scope.data.status==0\" type=\"success\" size=\"mini\">正常</el-tag>\r\n                            <el-tag v-else type=\"danger\" size=\"mini\">停用</el-tag>\r\n                        </template>\r\n                    </r-table>\r\n                </el-card>\r\n                <Add v-if=\"add.visible\" :param=\"add\" :typeId=\"selectTypeId\"></Add>\r\n                <Edit v-if=\"edit.visible\" :param=\"edit\" :typeId=\"selectTypeId\"></Edit>\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {type_query, dict_query, del} from '../../api/dict';\r\n    import RTable from \"../../components/RTable\";\r\n    import Add from \"./Add\";\r\n    import Edit from \"./Edit\";\r\n\r\n    export default {\r\n        name: \"Dict\",\r\n        components: {Edit, Add, RTable},\r\n        data() {\r\n            return {\r\n                typeTableData: [],\r\n                active: 0,\r\n                selectTypeId: 0,\r\n                typeTableCols: [\r\n                    {prop: 'name', label: '类型名称'}\r\n                ],\r\n                dictTableData: [],\r\n                dictTableCols: [\r\n                    {prop: 'dictKey', label: '字典名称'},\r\n                    {prop: 'dictVal', label: '字典值'},\r\n                    {prop: 'status', label: '状态', slot: 'slot_status'},\r\n                    {prop: 'sort', label: '序号', width: 100},\r\n                ],\r\n                add: {\r\n                    visible: false,\r\n                    close: this.close,\r\n                    callback: this.reload\r\n                },\r\n                edit: {\r\n                    visible: false,\r\n                    close: this.close,\r\n                    callback: this.reload,\r\n                    form: null\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            type_query({}).then(res => {\r\n                this.typeTableData = res.data;\r\n                this.selectTypeId = this.typeTableData[0].id;\r\n            })\r\n            this.list({typeId: this.selectTypeId})\r\n        },\r\n        methods: {\r\n            create() {\r\n                this.add.visible = true;\r\n            },\r\n            update() {\r\n                let selections = this.$refs['mutipleTable'].selection;\r\n                if (selections.length == 1) {\r\n                    this.edit.visible = true;\r\n                    this.edit.form = selections[0];\r\n                } else {\r\n                    this.$message.warning(\"请选择一条数据进行修改\");\r\n                }\r\n            },\r\n            reload() {\r\n                this.list({typeId: this.selectTypeId})\r\n            },\r\n            list(param) {\r\n                dict_query(param).then(res => {\r\n                    this.dictTableData = res.data;\r\n                })\r\n            },\r\n            close() {\r\n                this.add.visible = false;\r\n                this.edit.visible = false;\r\n            },\r\n            del() {\r\n                let selections = this.$refs['mutipleTable'].selection;\r\n                if (selections.length > 0) {\r\n                    this.$confirm(\"确定有删除吗？\", \"删除提示\").then(() => {\r\n                        let arr = selections.map(item => item.id);\r\n                        let ids = arr.join(',');\r\n                        del(ids).then(res => {\r\n                            this.$message.success(res.msg);\r\n                            this.reload();\r\n                        }).catch(() => {\r\n                        })\r\n                    })\r\n                } else {\r\n                    this.$message.warning(\"请选择要删除的数据\");\r\n                }\r\n            },\r\n            handleType(index, typeId) {\r\n                this.active = index;\r\n                this.selectTypeId = typeId;\r\n                this.list({typeId: typeId})\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .type {\r\n        list-style: none;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n\r\n    .type li {\r\n        height: 40px;\r\n        padding-left: 20px;\r\n        line-height: 40px;\r\n        box-sizing: border-box;\r\n        cursor: pointer;\r\n        font-size: 14px;\r\n    }\r\n\r\n    .type .active {\r\n        background-color: #009399;\r\n        color: #ffffff;\r\n        border-radius: 10px;\r\n    }\r\n</style>"]}]}